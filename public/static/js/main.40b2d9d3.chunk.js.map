{"version":3,"sources":["components/Note.js","components/AddNote.js","components/App.js","serviceWorker.js","index.js"],"names":["Note","props","note","index","editNote","doneEdit","cancelEdit","deleteNote","_props$note","_id","editing","titleValue","descriptionValue","date","react_default","a","createElement","className","onClick","dist_default","format","data-gramm","type","autoFocus","defaultValue","onBlur","e","onKeyUp","key","AddItem","maxLength","onChange","handleChange","addNote","name","value","App","state","beforeEditCache","notes","_this","setState","Object","defineProperty","target","newNote","concat","toConsumableArray","axios","post","filter","delete","prevState","splice","persist","trim","length","_this2","this","get","then","res","data","catch","err","console","log","_this3","AddNote","react_addons_css_transition_group_default","transitionName","transitionEnterTimeout","transitionLeaveTimeout","map","components_Note","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","components_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.40b2d9d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Moment from 'react-moment';\r\n\r\nconst Note = props => {\r\n  const { note, index, editNote, doneEdit, cancelEdit, deleteNote } = props;\r\n  const { _id, editing, titleValue, descriptionValue, date } = props.note;\r\n\r\n  return (\r\n    <li className=\"note-item\">\r\n      <div className=\"note-item-panel\">\r\n        <h4 className=\"note-item-title\">{titleValue}</h4>\r\n        <div onClick={() => deleteNote(_id)} className=\"remove-item\">\r\n          &times;\r\n        </div>\r\n      </div>\r\n      <Moment className=\"note-item-date\" format=\"YYYY.MM.DD, HH:mm\">{date}</Moment>\r\n\r\n      {!editing &&\r\n        <div\r\n          className=\"note-item-label\"\r\n          onClick={() => editNote(note, index)}>\r\n          {descriptionValue}\r\n        </div>\r\n      }\r\n      {editing &&\r\n        <textarea\r\n          data-gramm=\"false\"\r\n          className=\"note-item-edit\"\r\n          type=\"text\"\r\n          autoFocus\r\n          defaultValue={descriptionValue}\r\n          onBlur={(e) => doneEdit(note, index, e)}\r\n          onKeyUp={(e) => {\r\n            if (e.key === 'Enter') {\r\n              doneEdit(note, index, e);\r\n            } else if (e.key === 'Escape') {\r\n              cancelEdit(note, index);\r\n            };\r\n          }}\r\n        />\r\n      }\r\n    </li>\r\n  );\r\n};\r\n\r\nNote.propTypes = {\r\n  note: PropTypes.object.isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  editNote: PropTypes.func.isRequired,\r\n  cancelEdit: PropTypes.func.isRequired,\r\n  deleteNote: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Note;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddItem = props => {\r\n  return (\r\n    <input\r\n      maxLength=\"25\"\r\n      onChange={props.handleChange}\r\n      onKeyUp={props.addNote}\r\n      name=\"titleValue\"\r\n      value={props.titleValue}\r\n      type=\"text\"\r\n      className=\"note-input\"\r\n    />\r\n  );\r\n};\r\n\r\nAddItem.propTypes = {\r\n  handleChange: PropTypes.func.isRequired,\r\n  addNote: PropTypes.func.isRequired,\r\n  titleValue: PropTypes.string.isRequired\r\n};\r\n\r\nexport default AddItem;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport '../App.css';\n\nimport Note from './Note';\nimport AddNote from './AddNote';\n\nclass App extends Component {\n  state = {\n    beforeEditCache: '',\n    titleValue: '',\n    descriptionValue: 'Enter note content ...',\n    notes: []\n  };\n\n  componentDidMount() {\n    axios.get('/notes')\n      .then(res => {\n        this.setState({\n          notes: res.data\n        });\n      })\n      .catch(err => console.log(err));\n  };\n\n  handleChange = e => this.setState({ [e.target.name]: e.target.value });\n\n  addNote = e => {\n    if (e.key === 'Enter') {\n      const titleValue = this.state.titleValue;\n      if (!titleValue) return;\n      const descriptionValue = this.state.descriptionValue;\n\n      const newNote = {\n        titleValue,\n        descriptionValue,\n        editing: false\n      };\n\n      const notes = [...this.state.notes, newNote];\n      this.setState({\n        notes,\n        titleValue: ''\n      });\n\n      axios.post('/notes', newNote);\n    };\n  };\n\n  deleteNote = _id => {\n    this.setState({ notes: this.state.notes.filter(note => note._id !== _id) });\n\n    axios.delete(`/notes/${_id}`);\n  };\n\n  editNote = (note, index) => {\n    this.setState((prevState) => {\n      let notes = prevState.notes;\n      note.editing = true;\n      notes.splice(index, 1, note);\n\n      if (note.descriptionValue === this.state.descriptionValue) note.descriptionValue = '';\n\n      return { notes, beforeEditCache: note.descriptionValue };\n    });\n  };\n\n  doneEdit = (note, index, e) => {\n    e.persist();\n\n    this.setState((prevState) => {\n      let notes = prevState.notes;\n      note.editing = false;\n\n      if (e.target.value.trim().length === 0) {\n        note.descriptionValue = prevState.beforeEditCache;\n      } else {\n        note.descriptionValue = e.target.value;\n      };\n\n      if (note.descriptionValue === '') note.descriptionValue = this.state.descriptionValue;\n\n      notes.splice(index, 1, note);\n\n      return { notes };\n    });\n\n    axios.post(`/notes/${note._id}`, note);\n  };\n\n  cancelEdit = (note, index) => {\n    this.setState((prevState) => {\n      let notes = prevState.notes;\n      note.descriptionValue = prevState.beforeEditCache;\n      note.editing = false;\n\n      notes.splice(index, 1, note);\n\n      return { notes };\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"note-container\">\n          <h1 className=\"heading\">New note</h1>\n\n          <AddNote\n            handleChange={this.handleChange}\n            addNote={this.addNote}\n            titleValue={this.state.titleValue}\n          />\n          <ReactCSSTransitionGroup\n            className=\"note-list\"\n            transitionName=\"fade\"\n            transitionEnterTimeout={200}\n            transitionLeaveTimeout={200}>\n            {this.state.notes.map((note, index) => (\n              <Note\n                key={index}\n                note={note}\n                index={index}\n                editNote={this.editNote}\n                doneEdit={this.doneEdit}\n                cancelEdit={this.cancelEdit}\n                deleteNote={this.deleteNote}\n              />\n            ))}\n          </ReactCSSTransitionGroup>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();"],"sourceRoot":""}